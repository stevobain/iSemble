<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_1394569_isemble.iSembleUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>iSembleUtils</name>
        <script><![CDATA[var iSembleUtils = Class.create();
iSembleUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

	getUnavailableTimes: function() {
		var unavailableTimes = [];
		var room = this.getParameter('sysparm_room');
        var startTime = this.getParameter('sysparm_start_time');
		var endTime = this.getParameter('sysparm_end_time');
		
		var startGdt = new GlideDateTime();
		startGdt.setDisplayValue(startTime);
		var start = startGdt.getValue();
		var endGdt = new GlideDateTime();
		endGdt.setDisplayValue(endTime);
		var end = endGdt.getValue();

		var reservationGR = new GlideRecord('x_1394569_isemble_reservation');

        if (startTime && endTime) {
			reservationGR.addQuery('room', room);
            reservationGR.addQuery('start_time', '<', end);
			reservationGR.addQuery('end_time', '>', start);
			reservationGR.addQuery('reservation_status', 'confirmed');
			reservationGR.query();
        }

        while (reservationGR.next()) {
            unavailableTimes.push({
                start: reservationGR.start_time.toString(),
                end: reservationGR.end_time.toString()
            });
        }

        return JSON.stringify(unavailableTimes);
	},

    getAvailableRoomsOnLoad: function() {
        var availableRooms = [];
        var roomGr = new GlideRecord('x_1394569_isemble_room');
        roomGr.addQuery('room_status', 'available');
        roomGr.query();

        while (roomGr.next()) {
            availableRooms.push({
                value: roomGr.sys_id.toString(),
                label: roomGr.room_name.toString()
            });
        }

        return JSON.stringify(availableRooms);
    },

    getAvailableRoomsOnChange: function() {
        var availableRooms = [];
        var capacity = this.getParameter('sysparm_capacity');
        var equipment = this.getParameter('sysparm_equipment');
        var capacityNum = parseInt(capacity, 10);

        var roomGr = new GlideRecord('x_1394569_isemble_room');
        roomGr.addQuery('room_status', 'available');

        if (capacityNum) {
            roomGr.addQuery('capacity', '>=', capacityNum);
        }

        if (equipment) {
            roomGr.addQuery('equipment.equipment_name', equipment);
        }

        roomGr.query();

        while (roomGr.next()) {
            availableRooms.push({
                value: roomGr.sys_id.toString(),
                label: roomGr.room_name.toString()
            });
        }

        return JSON.stringify(availableRooms);
    },

    type: 'iSembleUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-15 21:01:08</sys_created_on>
        <sys_id>2d56c7c1831d52108c5d91d6feaad3cb</sys_id>
        <sys_mod_count>47</sys_mod_count>
        <sys_name>iSembleUtils</sys_name>
        <sys_package display_value="iSemble" source="x_1394569_isemble">bb5b608883c55210ffcebfc6feaad363</sys_package>
        <sys_policy/>
        <sys_scope display_value="iSemble">bb5b608883c55210ffcebfc6feaad363</sys_scope>
        <sys_update_name>sys_script_include_2d56c7c1831d52108c5d91d6feaad3cb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-28 21:38:01</sys_updated_on>
    </sys_script_include>
</record_update>
